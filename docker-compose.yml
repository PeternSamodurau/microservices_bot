version: '3.8' # Указываем версию Docker Compose.

services:
  # Сервис для RabbitMQ
  rabbitmq:
    image: rabbitmq:3.11.0-management # Используем указанный образ и тег
    hostname: rabbitmq                 # Имя хоста внутри контейнера (для внутренних нужд)
    container_name: rabbitmq           # Конкретное имя контейнера, чтобы легче было его найти
    ports:
      - "5672:5672"                    # Пробрасываем порт AMQP: <порт_на_хосте>:<порт_в_контейнере>
      - "15672:15672"                  # Пробрасываем порт для Management UI: <порт_на_хосте>:<порт_в_контейнере>
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Монтируем именованный том для персистентности данных
    restart: unless-stopped            # Контейнер будет автоматически перезапускаться при перезапуске Docker
    environment: # Переменные окружения для RabbitMQ.
      # Устанавливают дефолтного пользователя-администратора при первом запуске.
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}    # Соответствует spring.rabbitmq.username из твоего application.properties
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}      # Соответствует spring.rabbitmq.password из твоего application.properties

  # Сервис для PostgreSQL
  postgres:
    image: postgres:13                 # Используем образ PostgreSQL версии 13. Можно использовать 'latest' или другую версию.
    hostname: postgres                 # Имя хоста внутри контейнера
    container_name: postgres           # Конкретное имя контейнера
    ports:
      - "5432:5432"                    # Пробрасываем порт PostgreSQL: <порт_на_хосте>:<порт_в_контейнере>
    volumes:
      - postgres_data:/var/lib/postgresql/data # Монтируем именованный том для персистентности данных PostgreSQL
    restart: unless-stopped            # Контейнер будет автоматически перезапускаться при перезапуске Docker
    environment: # Переменные окружения для PostgreSQL.
      POSTGRES_DB: ${DATABASE_NAME}   # Имя базы данных, соответствует spring.datasource.url
      POSTGRES_USER: ${DATABASE_USERNAME}             # Имя пользователя, соответствует spring.datasource.username
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}         # Пароль пользователя, соответствует spring.datasource.password

  # НОВЫЙ СЕРВИС: rest-service (добавленный блок)
  rest-service:
    build:
      context: ./rest-service # Контекст сборки - директория rest-service
      dockerfile: Dockerfile  # Имя Dockerfile внутри этой директории
    container_name: rest_service # Конкретное имя контейнера
    ports:
      - "8083:8083" # Пробрасываем порт rest-service: <порт_на_хосте>:<порт_в_контейнере>
    environment:
      # Настройки для Spring Boot приложения внутри контейнера
      # hostname 'postgres' и 'rabbitmq' - это имена сервисов в docker-compose,
      # они резолвятся во внутренние IP-адреса контейнеров Docker.
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      SALT: ${SALT} # Ваша соль для CryptoTool
      # SPRING_PROFILES_ACTIVE: default # Если нужен конкретный профиль в Docker
    depends_on:
      - postgres # rest-service зависит от postgres
      - rabbitmq # rest-service зависит от rabbitmq
    restart: unless-stopped # Контейнер будет автоматически перезапускаться

  node-service:
    build:
      context: ./node
      dockerfile: Dockerfile
    container_name: node_service
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME}
      SPRING_DATASOURCE_USERNAME: ${DATABASE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DATABASE_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      SALT: ${SALT}
    depends_on:
      - postgres
      - rabbitmq
    restart: unless-stopped

  mail-service:
    build:
      context: ./mail-service
      dockerfile: Dockerfile
    container_name: mail_service
    ports:
      - "8086:8086"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      SALT: ${SALT}
    depends_on:
      - rabbitmq
    restart: unless-stopped

  dispatcher-service:
    build:
      context: ./dispatcher
      dockerfile: Dockerfile
    container_name: dispatcher_service
    ports:
      - "8084:8084"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      SALT: ${SALT}
    depends_on:
      - rabbitmq
    restart: unless-stopped


# Определение именованных томов для персистентного хранения данных
volumes:
  rabbitmq_data: # Данные RabbitMQ (очереди, настройки, сообщения) будут храниться здесь.
  postgres_data: # Данные PostgreSQL (таблицы, записи) будут храниться здесь.
  # Docker сам создаст эти тома при первом запуске.