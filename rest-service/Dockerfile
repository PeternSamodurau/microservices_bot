# Dockerfile для rest-service
# Используем легковесный образ JRE (Java Runtime Environment) для финального образа,
# так как нам нужен только запуск приложения, а не полная JDK.
# 'focal' - это кодовое имя для Ubuntu 20.04 LTS, обеспечивающее стабильную базу.
FROM eclipse-temurin:17-jre-focal

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды (COPY, CMD) будут выполняться относительно этой директории.
WORKDIR /app

# Копируем скомпилированный JAR-файл приложения в контейнер.
# ВАЖНО: Вы должны собрать свой проект Gradle ПЕРЕД запуском docker-compose!
# То есть, сначала выполните `gradle clean build` в корневом каталоге проекта.
# Путь к JAR-файлу указан относительно контекста сборки Docker (обычно это корневая директория вашего проекта).
# Имя JAR-файла по умолчанию для Spring Boot Gradle - <имя_модуля>-<версия>.jar.
COPY build/libs/rest-service-0.0.1-SNAPSHOT.jar app.jar


# Открываем порт, на котором Spring Boot приложение слушает входящие соединения.
# Этот порт должен совпадать с 'server.port' в rest-service/application.properties (у вас 8083).
EXPOSE 8083

# Определяем команду для запуска приложения.
# 'java -jar app.jar' запустит ваше Spring Boot приложение.
ENTRYPOINT ["java", "-jar", "app.jar"]

# Дополнительно: Задаем переменную окружения для активного профиля, если нужно.
# Если вы используете профиль 'dev' в локальной разработке:
# ENV SPRING_PROFILES_ACTIVE=default # или dev, если нужно для Docker-окружения